{"ast":null,"code":"var _jsxFileName = \"/Users/mrutka/Desktop/search/src/Autocomplete.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nexport class Autocomplete extends Component {\n  constructor(..._args) {\n    super(..._args);\n    this.state = {\n      activeOption: 0,\n      filteredOptions: [],\n      showOptions: false,\n      userInput: ''\n    };\n\n    this.onChange = e => {\n      console.log('onChanges');\n      const {\n        options\n      } = this.props;\n      const userInput = e.currentTarget.value; //console.log(\"e.currentTarget.value\",userInput);\n\n      this.setState({\n        //   activeOption: 0,\n        //   filteredOptions,\n        //   showOptions: true,\n        userInput: e.currentTarget.value\n      }, () => {\n        const {\n          userInput\n        } = this.state;\n        this.debounce(this.fetchApi(userInput), 500);\n      });\n    };\n\n    this.debounce = (func, delay) => {\n      let debounceTimer;\n      return function () {\n        const context = this;\n        const args = arguments;\n        clearTimeout(debounceTimer);\n        debounceTimer = setTimeout(() => func.apply(context, args), delay);\n      };\n    };\n\n    this.fetchApi = userInput => {\n      fetch(`http://localhost:9090/search/${userInput}`);\n      p1.json().then(p1 => {\n        Promise.resolve(p1).then(function (value) {\n          console.log(value);\n        });\n      });\n    };\n\n    this.onClick = e => {\n      this.setState({\n        activeOption: 0,\n        filteredOptions: [],\n        showOptions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeOption,\n        filteredOptions\n      } = this.state;\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeOption: 0,\n          showOptions: false,\n          userInput: filteredOptions[activeOption]\n        });\n      } else if (e.keyCode === 38) {\n        if (activeOption === 0) {\n          return;\n        }\n\n        this.setState({\n          activeOption: activeOption - 1\n        });\n      } else if (e.keyCode === 40) {\n        if (activeOption === filteredOptions.length - 1) {\n          console.log(activeOption);\n          return;\n        }\n\n        this.setState({\n          activeOption: activeOption + 1\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeOption,\n        filteredOptions,\n        showOptions,\n        userInput\n      }\n    } = this;\n    let optionList;\n\n    if (showOptions && userInput) {\n      if (filteredOptions.length) {\n        optionList = /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"options\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }\n        }, filteredOptions.map((optionName, index) => {\n          let className;\n\n          if (index === activeOption) {\n            className = 'option-active';\n          }\n\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: className,\n            key: optionName,\n            onClick: onClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 33\n            }\n          }, optionName);\n        }));\n      } else {\n        optionList = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"no-options\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"em\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }\n        }, \"No Option!\"));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-box\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"\",\n      className: \"search-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    })), optionList);\n  }\n\n}\nAutocomplete.propTypes = {\n  options: PropTypes.instanceOf(Array).isRequired\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/mrutka/Desktop/search/src/Autocomplete.js"],"names":["React","Component","PropTypes","Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","onChange","e","console","log","options","props","currentTarget","value","setState","debounce","fetchApi","func","delay","debounceTimer","context","args","arguments","clearTimeout","setTimeout","apply","fetch","p1","json","then","Promise","resolve","onClick","innerText","onKeyDown","keyCode","length","render","optionList","map","optionName","index","className","propTypes","instanceOf","Array","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAIxCG,KAJwC,GAIhC;AACJC,MAAAA,YAAY,EAAE,CADV;AAEJC,MAAAA,eAAe,EAAE,EAFb;AAGJC,MAAAA,WAAW,EAAE,KAHT;AAIJC,MAAAA,SAAS,EAAE;AAJP,KAJgC;;AAAA,SAWxCC,QAXwC,GAW5BC,CAAD,IAAO;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEA,YAAM;AAAEC,QAAAA;AAAF,UAAc,KAAKC,KAAzB;AACA,YAAMN,SAAS,GAAGE,CAAC,CAACK,aAAF,CAAgBC,KAAlC,CAJc,CAKd;;AACA,WAAKC,QAAL,CAAc;AACV;AACA;AACA;AACAT,QAAAA,SAAS,EAAEE,CAAC,CAACK,aAAF,CAAgBC;AAJjB,OAAd,EAKG,MAAM;AACL,cAAM;AAAER,UAAAA;AAAF,YAAgB,KAAKJ,KAA3B;AACA,aAAKc,QAAL,CAAc,KAAKC,QAAL,CAAcX,SAAd,CAAd,EAAwC,GAAxC;AACH,OARD;AAUH,KA3BuC;;AAAA,SA6BxCU,QA7BwC,GA6B7B,CAACE,IAAD,EAAOC,KAAP,KAAiB;AACxB,UAAIC,aAAJ;AACA,aAAO,YAAY;AACf,cAAMC,OAAO,GAAG,IAAhB;AACA,cAAMC,IAAI,GAAGC,SAAb;AACAC,QAAAA,YAAY,CAACJ,aAAD,CAAZ;AACAA,QAAAA,aAAa,GACPK,UAAU,CAAC,MAAMP,IAAI,CAACQ,KAAL,CAAWL,OAAX,EAAoBC,IAApB,CAAP,EAAkCH,KAAlC,CADhB;AAEH,OAND;AAOH,KAtCuC;;AAAA,SAwCxCF,QAxCwC,GAwC5BX,SAAD,IAAe;AACtBqB,MAAAA,KAAK,CAAE,gCAA+BrB,SAAU,EAA3C,CAAL;AACAsB,MAAAA,EAAE,CAACC,IAAH,GAAUC,IAAV,CAAgBF,EAAD,IAAQ;AACnBG,QAAAA,OAAO,CAACC,OAAR,CAAgBJ,EAAhB,EAAoBE,IAApB,CAAyB,UAAUhB,KAAV,EAAiB;AACtCL,UAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH,SAFD;AAGH,OAJD;AAKH,KA/CuC;;AAAA,SAiDxCmB,OAjDwC,GAiD7BzB,CAAD,IAAO;AACb,WAAKO,QAAL,CAAc;AACVZ,QAAAA,YAAY,EAAE,CADJ;AAEVC,QAAAA,eAAe,EAAE,EAFP;AAGVC,QAAAA,WAAW,EAAE,KAHH;AAIVC,QAAAA,SAAS,EAAEE,CAAC,CAACK,aAAF,CAAgBqB;AAJjB,OAAd;AAMH,KAxDuC;;AAAA,SAyDxCC,SAzDwC,GAyD3B3B,CAAD,IAAO;AACf,YAAM;AAAEL,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,UAAoC,KAAKF,KAA/C;;AAEA,UAAIM,CAAC,CAAC4B,OAAF,KAAc,EAAlB,EAAsB;AAClB,aAAKrB,QAAL,CAAc;AACVZ,UAAAA,YAAY,EAAE,CADJ;AAEVE,UAAAA,WAAW,EAAE,KAFH;AAGVC,UAAAA,SAAS,EAAEF,eAAe,CAACD,YAAD;AAHhB,SAAd;AAKH,OAND,MAMO,IAAIK,CAAC,CAAC4B,OAAF,KAAc,EAAlB,EAAsB;AACzB,YAAIjC,YAAY,KAAK,CAArB,EAAwB;AACpB;AACH;;AACD,aAAKY,QAAL,CAAc;AAAEZ,UAAAA,YAAY,EAAEA,YAAY,GAAG;AAA/B,SAAd;AACH,OALM,MAKA,IAAIK,CAAC,CAAC4B,OAAF,KAAc,EAAlB,EAAsB;AACzB,YAAIjC,YAAY,KAAKC,eAAe,CAACiC,MAAhB,GAAyB,CAA9C,EAAiD;AAC7C5B,UAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACA;AACH;;AACD,aAAKY,QAAL,CAAc;AAAEZ,UAAAA,YAAY,EAAEA,YAAY,GAAG;AAA/B,SAAd;AACH;AACJ,KA9EuC;AAAA;;AAgFxCmC,EAAAA,MAAM,GAAG;AACL,UAAM;AACF/B,MAAAA,QADE;AAEF0B,MAAAA,OAFE;AAGFE,MAAAA,SAHE;AAKFjC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA,eAAhB;AAAiCC,QAAAA,WAAjC;AAA8CC,QAAAA;AAA9C;AALL,QAMF,IANJ;AAOA,QAAIiC,UAAJ;;AACA,QAAIlC,WAAW,IAAIC,SAAnB,EAA8B;AAC1B,UAAIF,eAAe,CAACiC,MAApB,EAA4B;AACxBE,QAAAA,UAAU,gBACN;AAAI,UAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKnC,eAAe,CAACoC,GAAhB,CAAoB,CAACC,UAAD,EAAaC,KAAb,KAAuB;AACxC,cAAIC,SAAJ;;AACA,cAAID,KAAK,KAAKvC,YAAd,EAA4B;AACxBwC,YAAAA,SAAS,GAAG,eAAZ;AACH;;AACD,8BACI;AAAI,YAAA,SAAS,EAAEA,SAAf;AAA0B,YAAA,GAAG,EAAEF,UAA/B;AAA2C,YAAA,OAAO,EAAER,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKQ,UADL,CADJ;AAKH,SAVA,CADL,CADJ;AAeH,OAhBD,MAgBO;AACHF,QAAAA,UAAU,gBACN;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CADJ;AAKH;AACJ;;AACD,wBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,SAAS,EAAC,YAFd;AAGI,MAAA,QAAQ,EAAEhC,QAHd;AAII,MAAA,SAAS,EAAE4B,SAJf;AAKI,MAAA,KAAK,EAAE7B,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAQI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,EAA3B;AAA8B,MAAA,SAAS,EAAC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADJ,EAWKiC,UAXL,CADJ;AAeH;;AAjIuC;AAA/BtC,Y,CACF2C,S,GAAY;AACfjC,EAAAA,OAAO,EAAEX,SAAS,CAAC6C,UAAV,CAAqBC,KAArB,EAA4BC;AADtB,C;AAmIvB,eAAe9C,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Autocomplete extends Component {\n    static propTypes = {\n        options: PropTypes.instanceOf(Array).isRequired\n    };\n    state = {\n        activeOption: 0,\n        filteredOptions: [],\n        showOptions: false,\n        userInput: ''\n    };\n\n    onChange = (e) => {\n        console.log('onChanges');\n\n        const { options } = this.props;\n        const userInput = e.currentTarget.value;\n        //console.log(\"e.currentTarget.value\",userInput);\n        this.setState({\n            //   activeOption: 0,\n            //   filteredOptions,\n            //   showOptions: true,\n            userInput: e.currentTarget.value\n        }, () => {\n            const { userInput } = this.state;\n            this.debounce(this.fetchApi(userInput), 500);\n        });\n\n    };\n\n    debounce = (func, delay) => {\n        let debounceTimer\n        return function () {\n            const context = this\n            const args = arguments\n            clearTimeout(debounceTimer)\n            debounceTimer\n                = setTimeout(() => func.apply(context, args), delay)\n        }\n    }\n\n    fetchApi = (userInput) => {\n        fetch(`http://localhost:9090/search/${userInput}`)\n        p1.json().then((p1) => {\n            Promise.resolve(p1).then(function (value) {\n                console.log(value);\n            });\n        })\n    }\n\n    onClick = (e) => {\n        this.setState({\n            activeOption: 0,\n            filteredOptions: [],\n            showOptions: false,\n            userInput: e.currentTarget.innerText\n        });\n    };\n    onKeyDown = (e) => {\n        const { activeOption, filteredOptions } = this.state;\n\n        if (e.keyCode === 13) {\n            this.setState({\n                activeOption: 0,\n                showOptions: false,\n                userInput: filteredOptions[activeOption]\n            });\n        } else if (e.keyCode === 38) {\n            if (activeOption === 0) {\n                return;\n            }\n            this.setState({ activeOption: activeOption - 1 });\n        } else if (e.keyCode === 40) {\n            if (activeOption === filteredOptions.length - 1) {\n                console.log(activeOption);\n                return;\n            }\n            this.setState({ activeOption: activeOption + 1 });\n        }\n    };\n\n    render() {\n        const {\n            onChange,\n            onClick,\n            onKeyDown,\n\n            state: { activeOption, filteredOptions, showOptions, userInput }\n        } = this;\n        let optionList;\n        if (showOptions && userInput) {\n            if (filteredOptions.length) {\n                optionList = (\n                    <ul className=\"options\">\n                        {filteredOptions.map((optionName, index) => {\n                            let className;\n                            if (index === activeOption) {\n                                className = 'option-active';\n                            }\n                            return (\n                                <li className={className} key={optionName} onClick={onClick}>\n                                    {optionName}\n                                </li>\n                            );\n                        })}\n                    </ul>\n                );\n            } else {\n                optionList = (\n                    <div className=\"no-options\">\n                        <em>No Option!</em>\n                    </div>\n                );\n            }\n        }\n        return (\n            <React.Fragment>\n                <div className=\"search\">\n                    <input\n                        type=\"text\"\n                        className=\"search-box\"\n                        onChange={onChange}\n                        onKeyDown={onKeyDown}\n                        value={userInput}\n                    />\n                    <input type=\"submit\" value=\"\" className=\"search-btn\" />\n                </div>\n                {optionList}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}