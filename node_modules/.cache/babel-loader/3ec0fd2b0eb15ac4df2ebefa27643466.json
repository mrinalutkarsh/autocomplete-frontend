{"ast":null,"code":"var _jsxFileName = \"/Users/mrutka/Desktop/search/src/Autocomplete.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nexport class Autocomplete extends Component {\n  constructor() {\n    dbsearch = userInput => debounce(this.fetchApi(userInput), 500);\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeOption,\n        filteredOptions,\n        showOptions,\n        userInput\n      }\n    } = this;\n    let optionList;\n\n    if (showOptions && userInput) {\n      if (filteredOptions.length) {\n        optionList = /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"options\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }\n        }, filteredOptions.map((optionName, index) => {\n          let className;\n\n          if (index === activeOption) {\n            className = 'option-active';\n          }\n\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: className,\n            key: optionName,\n            onClick: onClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }\n          }, optionName);\n        }));\n      } else {\n        optionList = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"no-options\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"em\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }\n        }, \"No Option!\"));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-box\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"\",\n      className: \"search-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    })), optionList);\n  }\n\n}\nAutocomplete.propTypes = {\n  options: PropTypes.instanceOf(Array).isRequired\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/mrutka/Desktop/search/src/Autocomplete.js"],"names":["React","Component","PropTypes","debounce","Autocomplete","constructor","dbsearch","userInput","fetchApi","render","onChange","onClick","onKeyDown","state","activeOption","filteredOptions","showOptions","optionList","length","map","optionName","index","className","propTypes","options","instanceOf","Array","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,QAAR,QAAuB,QAAvB;AAEA,OAAO,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAExCI,EAAAA,WAAW,GAAE;AACTC,IAAAA,QAAQ,GAAIC,SAAD,IAAeJ,QAAQ,CAAC,KAAKK,QAAL,CAAcD,SAAd,CAAD,EAA2B,GAA3B,CAAlC;AACH;;AAuEDE,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA,QADE;AAEFC,MAAAA,OAFE;AAGFC,MAAAA,SAHE;AAKFC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA,eAAhB;AAAiCC,QAAAA,WAAjC;AAA8CT,QAAAA;AAA9C;AALL,QAMF,IANJ;AAOA,QAAIU,UAAJ;;AACA,QAAID,WAAW,IAAIT,SAAnB,EAA8B;AAC1B,UAAIQ,eAAe,CAACG,MAApB,EAA4B;AACxBD,QAAAA,UAAU,gBACN;AAAI,UAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKF,eAAe,CAACI,GAAhB,CAAoB,CAACC,UAAD,EAAaC,KAAb,KAAuB;AACxC,cAAIC,SAAJ;;AACA,cAAID,KAAK,KAAKP,YAAd,EAA4B;AACxBQ,YAAAA,SAAS,GAAG,eAAZ;AACH;;AACD,8BACI;AAAI,YAAA,SAAS,EAAEA,SAAf;AAA0B,YAAA,GAAG,EAAEF,UAA/B;AAA2C,YAAA,OAAO,EAAET,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKS,UADL,CADJ;AAKH,SAVA,CADL,CADJ;AAeH,OAhBD,MAgBO;AACHH,QAAAA,UAAU,gBACN;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CADJ;AAKH;AACJ;;AACD,wBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,SAAS,EAAC,YAFd;AAGI,MAAA,QAAQ,EAAEP,QAHd;AAII,MAAA,SAAS,EAAEE,SAJf;AAKI,MAAA,KAAK,EAAEL,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAQI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,EAA3B;AAA8B,MAAA,SAAS,EAAC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADJ,EAWKU,UAXL,CADJ;AAeH;;AA5HuC;AAA/Bb,Y,CAMFmB,S,GAAY;AACfC,EAAAA,OAAO,EAAEtB,SAAS,CAACuB,UAAV,CAAqBC,KAArB,EAA4BC;AADtB,C;AAyHvB,eAAevB,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {debounce} from 'lodash';\n\nexport class Autocomplete extends Component {\n\n    constructor(){\n        dbsearch = (userInput) => debounce(this.fetchApi(userInput), 500);\n    }\n\n    static propTypes = {\n        options: PropTypes.instanceOf(Array).isRequired\n    };\n    state = {\n        activeOption: 0,\n        filteredOptions: [],\n        showOptions: false,\n        userInput: ''\n    };\n\n    onChange = (e) => {\n        console.log('onChanges');\n\n        const { options } = this.props;\n        const userInput = e.currentTarget.value;\n        //console.log(\"e.currentTarget.value\",userInput);\n        this.setState({\n            //   activeOption: 0,\n            //   filteredOptions,\n            //   showOptions: true,\n            userInput: e.currentTarget.value\n        }, () => {\n            const { userInput } = this.state;\n            this.dbsearch(userInput)\n        });\n\n    };\n\n    fetchApi = (userInput) => {\n        fetch(`http://localhost:9090/search/${userInput}`)\n        .then((p1) => Promise.resolve(p1))\n        .then((p1) => p1.json())\n        .then((p1)=> {\n        console.log(p1);\n        });\n    }\n        \n\n    onClick = (e) => {\n        this.setState({\n            activeOption: 0,\n            filteredOptions: [],\n            showOptions: false,\n            userInput: e.currentTarget.innerText\n        });\n    };\n    onKeyDown = (e) => {\n        const { activeOption, filteredOptions } = this.state;\n\n        if (e.keyCode === 13) {\n            this.setState({\n                activeOption: 0,\n                showOptions: false,\n                userInput: filteredOptions[activeOption]\n            });\n        } else if (e.keyCode === 38) {\n            if (activeOption === 0) {\n                return;\n            }\n            this.setState({ activeOption: activeOption - 1 });\n        } else if (e.keyCode === 40) {\n            if (activeOption === filteredOptions.length - 1) {\n                console.log(activeOption);\n                return;\n            }\n            this.setState({ activeOption: activeOption + 1 });\n        }\n    };\n\n    render() {\n        const {\n            onChange,\n            onClick,\n            onKeyDown,\n\n            state: { activeOption, filteredOptions, showOptions, userInput }\n        } = this;\n        let optionList;\n        if (showOptions && userInput) {\n            if (filteredOptions.length) {\n                optionList = (\n                    <ul className=\"options\">\n                        {filteredOptions.map((optionName, index) => {\n                            let className;\n                            if (index === activeOption) {\n                                className = 'option-active';\n                            }\n                            return (\n                                <li className={className} key={optionName} onClick={onClick}>\n                                    {optionName}\n                                </li>\n                            );\n                        })}\n                    </ul>\n                );\n            } else {\n                optionList = (\n                    <div className=\"no-options\">\n                        <em>No Option!</em>\n                    </div>\n                );\n            }\n        }\n        return (\n            <React.Fragment>\n                <div className=\"search\">\n                    <input\n                        type=\"text\"\n                        className=\"search-box\"\n                        onChange={onChange}\n                        onKeyDown={onKeyDown}\n                        value={userInput}\n                    />\n                    <input type=\"submit\" value=\"\" className=\"search-btn\" />\n                </div>\n                {optionList}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}