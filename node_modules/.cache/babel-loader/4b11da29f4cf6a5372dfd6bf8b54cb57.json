{"ast":null,"code":"var _jsxFileName = \"/Users/mrutka/Desktop/search/src/Autocomplete.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nexport class Autocomplete extends Component {\n  constructor(..._args) {\n    super(..._args);\n    this.state = {\n      activeOption: 0,\n      filteredOptions: [],\n      showOptions: false,\n      userInput: ''\n    };\n\n    this.onChange = e => {\n      console.log('onChanges');\n      const {\n        options\n      } = this.props;\n      const userInput = e.currentTarget.value; //console.log(\"e.currentTarget.value\",userInput);\n\n      this.setState({\n        //   activeOption: 0,\n        //   filteredOptions,\n        //   showOptions: true,\n        userInput: e.currentTarget.value\n      }, () => {\n        const {\n          userInput\n        } = this.state;\n        this.debounce(this.fetchApi(userInput), 500);\n      });\n    };\n\n    this.debounce = (func, delay) => {\n      let debounceTimer;\n      return function () {\n        const context = this;\n        const args = arguments;\n        clearTimeout(debounceTimer);\n        debounceTimer = setTimeout(() => func.apply(context, args), delay);\n      };\n    };\n\n    this.fetchApi = async userInput => {\n      // All the taxing stuff you do\n      const p1 = await fetch(`http://localhost:9090/search/${userInput}`); // const promise = new Promise(p1);\n\n      console.log(\"########\", p1.json);\n    };\n\n    this.onClick = e => {\n      this.setState({\n        activeOption: 0,\n        filteredOptions: [],\n        showOptions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeOption,\n        filteredOptions\n      } = this.state;\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeOption: 0,\n          showOptions: false,\n          userInput: filteredOptions[activeOption]\n        });\n      } else if (e.keyCode === 38) {\n        if (activeOption === 0) {\n          return;\n        }\n\n        this.setState({\n          activeOption: activeOption - 1\n        });\n      } else if (e.keyCode === 40) {\n        if (activeOption === filteredOptions.length - 1) {\n          console.log(activeOption);\n          return;\n        }\n\n        this.setState({\n          activeOption: activeOption + 1\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeOption,\n        filteredOptions,\n        showOptions,\n        userInput\n      }\n    } = this;\n    let optionList;\n\n    if (showOptions && userInput) {\n      if (filteredOptions.length) {\n        optionList = /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"options\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }\n        }, filteredOptions.map((optionName, index) => {\n          let className;\n\n          if (index === activeOption) {\n            className = 'option-active';\n          }\n\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: className,\n            key: optionName,\n            onClick: onClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }\n          }, optionName);\n        }));\n      } else {\n        optionList = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"no-options\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"em\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }\n        }, \"No Option!\"));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-box\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"\",\n      className: \"search-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    })), optionList);\n  }\n\n}\nAutocomplete.propTypes = {\n  options: PropTypes.instanceOf(Array).isRequired\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/mrutka/Desktop/search/src/Autocomplete.js"],"names":["React","Component","PropTypes","Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","onChange","e","console","log","options","props","currentTarget","value","setState","debounce","fetchApi","func","delay","debounceTimer","context","args","arguments","clearTimeout","setTimeout","apply","p1","fetch","json","onClick","innerText","onKeyDown","keyCode","length","render","optionList","map","optionName","index","className","propTypes","instanceOf","Array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Autocomplete extends Component {\n  static propTypes = {\n    options: PropTypes.instanceOf(Array).isRequired\n  };\n  state = {\n    activeOption: 0,\n    filteredOptions: [],\n    showOptions: false,\n    userInput: ''\n  };\n\n  onChange = (e) => {\n    console.log('onChanges');\n\n    const { options } = this.props;\n    const userInput = e.currentTarget.value;\n    //console.log(\"e.currentTarget.value\",userInput);\n    this.setState({\n    //   activeOption: 0,\n    //   filteredOptions,\n    //   showOptions: true,\n      userInput: e.currentTarget.value\n    },()=>{\n        const {userInput} = this.state; \n        this.debounce(this.fetchApi(userInput), 500);\n    });\n    \n  };\n\ndebounce = (func, delay) => { \n    let debounceTimer \n    return function() { \n        const context = this\n        const args = arguments \n            clearTimeout(debounceTimer) \n                debounceTimer \n            = setTimeout(() => func.apply(context, args), delay) \n    } \n }  \n\n  \n  fetchApi = async(userInput) => {\n    // All the taxing stuff you do\n    const p1 = await fetch(`http://localhost:9090/search/${userInput}`)\n    // const promise = new Promise(p1);\n    console.log(\"########\",p1.json);\n  }\n  \n  onClick = (e) => {\n    this.setState({\n      activeOption: 0,\n      filteredOptions: [],\n      showOptions: false,\n      userInput: e.currentTarget.innerText\n    });\n  };\n  onKeyDown = (e) => {\n    const { activeOption, filteredOptions } = this.state;\n\n    if (e.keyCode === 13) {\n      this.setState({\n        activeOption: 0,\n        showOptions: false,\n        userInput: filteredOptions[activeOption]\n      });\n    } else if (e.keyCode === 38) {\n      if (activeOption === 0) {\n        return;\n      }\n      this.setState({ activeOption: activeOption - 1 });\n    } else if (e.keyCode === 40) {\n      if (activeOption === filteredOptions.length - 1) {\n        console.log(activeOption);\n        return;\n      }\n      this.setState({ activeOption: activeOption + 1 });\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n\n      state: { activeOption, filteredOptions, showOptions, userInput }\n    } = this;\n    let optionList;\n    if (showOptions && userInput) {\n      if (filteredOptions.length) {\n        optionList = (\n          <ul className=\"options\">\n            {filteredOptions.map((optionName, index) => {\n              let className;\n              if (index === activeOption) {\n                className = 'option-active';\n              }\n              return (\n                <li className={className} key={optionName} onClick={onClick}>\n                  {optionName}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        optionList = (\n          <div className=\"no-options\">\n            <em>No Option!</em>\n          </div>\n        );\n      }\n    }\n    return (\n      <React.Fragment>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            className=\"search-box\"\n            onChange={onChange}\n            onKeyDown={onKeyDown}\n            value={userInput}\n          />\n          <input type=\"submit\" value=\"\" className=\"search-btn\" />\n        </div>\n        {optionList}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}